class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ret = new ArrayList<>();
        backTrack(ret, new ArrayList<>(), candidates, target, 0);
        return ret;
    }
    private void backTrack(List<List<Integer>> ret, List<Integer> curr, int[] candidates, int target, int start){
        if(target == 0){
            ret.add(new ArrayList<>(curr));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (candidates[i] > target) continue; 
            curr.add(candidates[i]);               
            backTrack(ret, curr, candidates, target - candidates[i], i); 
            curr.remove(curr.size() - 1);         
        }
    }
}
