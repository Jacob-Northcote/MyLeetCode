class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ret = new ArrayList<>();
        Arrays.sort(candidates);
        backTrack(ret, new ArrayList<>(), candidates, target, 0);
        return ret;
    }
    private void backTrack(List<List<Integer>> ret, List<Integer> curr, int[] candidates, int target, int start){
        if(target == 0){
            ret.add(new ArrayList<>(curr));
            return;
        }
        for(int i = start; i < candidates.length; i++){
            if (i > start && candidates[i] == candidates[i - 1]) continue;

            if (candidates[i] > target) break; 

            curr.add(candidates[i]); 
            backTrack(ret, curr, candidates, target - candidates[i], i + 1); 
            curr.remove(curr.size() - 1); 
        }
    }
}
