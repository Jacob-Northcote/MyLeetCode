/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // This field holds the largest diameter found so far (in edges).
    private int maxDiameter = 0;

    public int diameterOfBinaryTree(TreeNode root) {
  
        height(root);
        return maxDiameter;
    }

    private int height(TreeNode node) {
        if (node == null) {
            return 0;
        }
        int hL = height(node.left);
        int hR = height(node.right);

        maxDiameter = Math.max(maxDiameter, hL + hR);

        // Height of this node = 1 + max(height(left), height(right))
        return 1 + Math.max(hL, hR);
    }
}
