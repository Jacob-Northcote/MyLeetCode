class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> nummap = new HashMap <>();
        
        for( int i = 0; i < nums.length; i++){
            nummap.put(nums[i],nummap.getOrDefault(nums[i], 0) + 1); 
        }
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap =
            new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());

        for (Map.Entry<Integer, Integer> entry : nummap.entrySet()) {
            minHeap.offer(entry);
            if (minHeap.size() > k) {
                minHeap.poll(); // remove the least frequent
            }
        }

        // Extract results from heap
        int[] result = new int[k];
        int i = 0;
        while (!minHeap.isEmpty()) {
            result[i++] = minHeap.poll().getKey();
        }

        return result;

        

    

    }
}
